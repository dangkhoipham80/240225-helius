import fetch from "cross-fetch";
import dotenv from "dotenv";
import {
    Connection,
    Keypair,
    Transaction,
    PublicKey,
} from "@solana/web3.js";
import { Wallet } from "@coral-xyz/anchor";

dotenv.config(); // ‚úÖ Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env

// ‚úÖ 1Ô∏è‚É£ K·∫øt N·ªëi V√≠ t·ª´ Private Key
if (!process.env.PRIVATE_KEY) {
    console.error("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y PRIVATE_KEY trong .env!");
    process.exit(1);
}
const privateKeyArray = JSON.parse(process.env.PRIVATE_KEY);
const wallet = new Wallet(Keypair.fromSecretKey(new Uint8Array(privateKeyArray)));
console.log("üîë V√≠ c·ªßa b·∫°n:", wallet.publicKey.toBase58());

// ‚úÖ 2Ô∏è‚É£ K·∫øt N·ªëi Solana (Devnet)
const SOLANA_RPC_URL = "https://api.devnet.solana.com";
const connection = new Connection(SOLANA_RPC_URL, { commitment: "confirmed" });
console.log(`üîó K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn Solana (${SOLANA_RPC_URL})!`);

// ‚úÖ 3Ô∏è‚É£ H√†m Retry Transaction (T·ª± ƒë·ªông th·ª≠ l·∫°i)
async function sendTransactionWithRetry(transaction, maxRetries = 3) {
    let attempts = 0;
    let lastError;
    
    while (attempts < maxRetries) {
        try {
            const txid = await connection.sendRawTransaction(transaction.serialize(), {
                skipPreflight: true,
                preflightCommitment: "confirmed",
            });

            console.log(`üöÄ Attempt ${attempts + 1}: Transaction Sent - ${txid}`);

            // X√°c nh·∫≠n giao d·ªãch
            const confirmation = await connection.confirmTransaction(txid, "finalized");
            if (confirmation.value.err) {
                throw new Error(`Transaction Failed: ${JSON.stringify(confirmation.value.err)}`);
            }

            console.log(`‚úÖ Transaction Confirmed: ${txid}`);
            return txid;
        } catch (error) {
            lastError = error;
            console.warn(`‚ö†Ô∏è Attempt ${attempts + 1} Failed: ${error.message}`);
            attempts++;
        }
    }

    throw new Error(`‚ùå All ${maxRetries} attempts failed. Last error: ${lastError.message}`);
}

// ‚úÖ 4Ô∏è‚É£ H√†m Swap Token (T·∫Øt Address Lookup Table)
async function swapTokens(inputMint, outputMint, amount, slippageBps = 50) {
    console.log(`üîÑ B·∫Øt ƒë·∫ßu swap t·ª´ ${inputMint} ‚Üí ${outputMint} v·ªõi s·ªë l∆∞·ª£ng ${amount}`);

    try {
        // 1Ô∏è‚É£ L·∫•y Quote t·ª´ Jupiter API
        console.log("üîé L·∫•y quote...");
        const quoteResponse = await fetch(
            `https://api.jup.ag/swap/v1/quote?inputMint=${inputMint}&outputMint=${outputMint}&amount=${amount}&slippageBps=${slippageBps}`
        );
        const quoteData = await quoteResponse.json();

        if (!quoteData?.outAmount) {
            console.error("‚ùå L·ªói: Kh√¥ng l·∫•y ƒë∆∞·ª£c quote h·ª£p l·ªá t·ª´ Jupiter!", quoteData);
            return;
        }
        console.log("‚úÖ Quote nh·∫≠n ƒë∆∞·ª£c:", JSON.stringify(quoteData, null, 2));

        // 2Ô∏è‚É£ T·∫°o Transaction Swap (T·∫Øt Address Lookup Table)
        console.log("üìù T·∫°o transaction swap...");
        const swapResponse = await fetch("https://api.jup.ag/swap/v1/swap", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                quoteResponse: quoteData,
                userPublicKey: wallet.publicKey.toBase58(),
                asLegacyTransaction: true,  // ‚úÖ T·∫Øt Address Lookup Table
                dynamicComputeUnitLimit: true,
                dynamicSlippage: true,
            }),
        });

        const swapResult = await swapResponse.json();
        if (!swapResult.swapTransaction) {
            console.error("‚ùå L·ªói: Kh√¥ng th·ªÉ t·∫°o transaction swap!", swapResult);
            return;
        }

        // 3Ô∏è‚É£ L·∫•y blockhash m·ªõi
        const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();

        // 4Ô∏è‚É£ K√Ω & G·ª≠i Transaction
        console.log("üöÄ K√Ω transaction...");
        const transactionBuffer = Buffer.from(swapResult.swapTransaction, "base64");
        const transaction = Transaction.from(transactionBuffer);

        // C·∫≠p nh·∫≠t blockhash m·ªõi
        transaction.recentBlockhash = blockhash;

        // K√Ω transaction b·∫±ng private key
        transaction.sign(wallet.payer);

        console.log("üì§ G·ª≠i transaction v·ªõi retry...");
        const txid = await sendTransactionWithRetry(transaction);
        console.log(`‚úÖ Swap Th√†nh C√¥ng! Transaction ID: ${txid}`);
        console.log(`üîó Xem giao d·ªãch t·∫°i: https://solscan.io/tx/${txid}?cluster=devnet`);
    } catch (error) {
        console.error("‚ùå L·ªói khi swap:", error);
    }
}

// ‚úÖ 5Ô∏è‚É£ G·ªçi Swap (C√≥ Retry)
const inputMint = "So11111111111111111111111111111111111111112"; // SOL
const outputMint = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"; // USDC
const amount = 13500; // 1 SOL (ƒë∆°n v·ªã lamports)

swapTokens(inputMint, outputMint, amount);
